public class ChessGui {

  public ChessGui(Board b)
  {
	setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLocation((int)(screenSize.getWidth()*.15), (int) (screenSize.getHeight()*.15));
        setLayout(new BorderLayout());
        addPanels();
        this.addWindowListener(new WindowAdapter() {
          public void windowClosing(WindowEvent e) {
            int confirmed = JOptionPane.showConfirmDialog(null,
              "Do you want to save the current game?", "Save Game Message Box",
              JOptionPane.YES_NO_OPTION);
            if(confirmed == JOptionPane.YES_OPTION) {
              SaveState.createMenu().displaySaveMenu();
            }
            SaveState.createMenu().boardState = null;
            SaveState.createMenu().mainMenu.displayMainMenu();
          }
        });
        setVisible(true);
        toFront();
    }


}


public class Menu extends JPanel {

   import Saves.*;

   public SaveState loadMenu;

   public Menu() {
	loadMenu = SaveState.createMenu();	//top
	loadMenu.initButtons();

	add(Box.createVerticalStrut(10));	//bottom

        Button loadbutton = new Button("Load Game");
        loadbutton.setAlignmentX(JPanel.CENTER_ALIGNMENT);
        loadbutton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loadMenu.displayLoadMenu();
            }
        });

        add(loadbutton);

   }
}

public class Options {

	public void bulletSet() {

	   setMode("BULLET");
	}

	public void wallSet() {
	   setMode("WALL");
	}
}

public class Board {

	public Board(options o){
		teamTurn = options.getTurn();		
		setPieces();

	}
}

class InfoPanel {

	thisGui = g;
        currTeam = g.gameBoard.teamTurn; //////

	teamText.setText("White Turn"); ->  setTeamText(currTeam);

}

class MainBoardPanel {

import java.awt.event.MouseListener;
     
     MyGlassPane glass;
     public MainBoardPanel(ChessGui g) {

	ButtonListener.setBoardPanel(this);
        glass = new MyGlassPane(thisGui.getContentPane(), thisGui.menu);
        thisGui.setGlassPane(glass);
        boardSet();
        updateBoard();
    }

     public void boardSet() {

	for(int j = 0; j < 8; j ++)
            {
                ChessSquare newSquare = new ChessSquare(counter, i, j);
                squares[i][j] = newSquare;					
		newSquare.setFocusable(false);                
		newSquare.removeMouseListener(temp[0]);
		MouseListener[] temp = newSquare.getMouseListeners();		//this part
                newSquare.addMouseListener(new ButtonListener());
                add(squares[i][j]);
                counter = Math.abs(counter-1);
            }
     }
									//pawnID ??
     public ArrayList<ChessSquare> displayPossibleMoves(long board){
              
		if(((board>>(x*8)+y)&1) == 1)
                {
                    squares[x][y].Highlight();	
                    retList.add(squares[x][y]);
                }
	}

     public void updateBoard(){

	for(int x = 0; x < 8; x ++)
        {
            for(int y = 0; y < 8; y++)
            {
              if(!highlightedSquares.contains(squares[x][y])) {		//This part
                squares[x][y].setIcon(null);
                squares[x][y].setActionCommand("White  " + x + " " + y);
              }
            }
        }
     }

}

